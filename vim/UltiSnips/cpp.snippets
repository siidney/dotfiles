# make custom snippets override defaults
priority 1

# include
snippet inc "#include <...>"
#include <${1:iostream}>
endsnippet

# include
snippet Inc "#include '..."
#include "${1:`!p snip.rv = snip.basename or "name"`}.h"
endsnippet

# main
snippet main "int main(int argc, const char* argv[])"
int main(int argc, const char* argv[]){
	${VISUAL}${0}
	return 0;
}
endsnippet

# class
snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}${2}{
	public:
		${1/(\w+).*/$1/}(${3});
		~${1/(\w+).*/$1/}();

	private:${0}
};
endsnippet

# function definition class name
snippet funcl "function class name" b
${1:void} ${2:`!p snip.rv = snip.basename or "name"`}::${3:function_name}(${4})${5}{
	${VISUAL}${0}
}
endsnippet

# function definition
snippet fun "function" b
${1:void} ${2:function_name}(${3})${4}{
	${VISUAL}${0}
}
endsnippet

# function declaration
snippet fund "function declaration" b
${1:void} ${2:function_name}(${3})${4};
endsnippet

# for loop
snippet for "for loop (for)"
for(int ${1:i}=0; $1${2:<count}; ${3:++$1}){
	${VISUAL}${0}
}
endsnippet

# cout
snippet cout "std::cout << "
std::cout << ${0}
endsnippet

# endl
snippet endl "<< std::endl;"
<< std::endl;
endsnippet

# cendl
snippet cendl "std::cout << std::endl;"
std::cout << std::endl;
endsnippet

# vim:ft=snippets:
