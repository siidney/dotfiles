# make custom snippets override defaults
# priority 2 is higher than c.snippets
priority 2

# include
snippet inc "#include <...>" b
#include <${1:iostream}>
endsnippet

# include
snippet Inc "#include '..." b
#include "${1:`!p snip.rv = snip.basename or "name"`}.h"
endsnippet

# constructor
snippet ct "CLASS::CLASS()"
${1:`!p snip.rv = snip.basename or "name"`}::$1(${2:})${3}{
	${VISUAL}${0}
}
endsnippet

# destructor
snippet dt "~CLASS::CLASS()"
~${1:`!p snip.rv = snip.basename or "name"`}::$1(${2:})${3}{
	${VISUAL}${0}
}
endsnippet

# constructor/destructor
snippet ctdt "CLASS::CLASS() ~CLASS::CLASS()"
${1:`!p snip.rv = snip.basename or "name"`}::$1(${2:})${3}{
	${4}
}
~$1::$1(${5:})${6}{
	${VISUAL}${0}
}
endsnippet

# main
snippet main "int main(int argc, const char* argv[])" b
int main(int argc, const char* argv[]){
	${VISUAL}${0}

	return 0;
}
endsnippet

# vector
snippet vec "std::vector (v)" i
std::vector<${1:char}> ${2:v}${0}
endsnippet

# class
snippet cl "class .. (class)" b
class ${1:`!p snip.rv = snip.basename or "name"`}${2}{
	public:
		${1/(\w+).*/$1/}(${3});
		~${1/(\w+).*/$1/}();

	private:${0}
};
endsnippet

# function definition class name
snippet funcl "function class name" b
${1:void} `!p snip.rv = snip.basename or "name"`::${2:func}(${3})${4}{
	${VISUAL}${0}
}
endsnippet

# function definition
snippet fun "function" b
${1:void} ${2:func}(${3})${4}{
	${VISUAL}${0}
}
endsnippet

# function declaration
snippet fund "function declaration" b
${1:void} ${2:func}(${3})${4};
endsnippet

# empty function template
# useful for . and -> functions
snippet fn "function template" i
${1:.}${2:func}(${3:args})${0}
endsnippet

# for loop
snippet for "for loop (for)" b
for(${1:int} ${2:i}=${3:0}; $2${4:<count}; ${5:++}$2){
	${VISUAL}${0}
}
endsnippet

# if
snippet if "if()" b
if(${1:true})
	${VISUAL}${0}
endsnippet

# iff
snippet iff "if(){}" b
if(${1:true}){
	${VISUAL}${0}
}
endsnippet

# switch
snippet sw "switch()" b
switch(${1:/* var */}){
	case ${2:/* var case */}:
		${3:}
	break;${0}
}
endsnippet

# switch case
snippet case "case x:" b
case ${1:/*var case*/}:
	${2}
break;${0}
endsnippet

# while
snippet wh "while()" b
while(${1:true}){
	${VISUAL}${0}
}
endsnippet

# do..while
snippet do "do..while()" b
do{
	${VISUAL}${0}
}while(${1: /* condition */});
endsnippet

# STL Prefixed stuff

# std::
snippet std "std::" i
std::${0}
endsnippet

# cout
snippet cout "std::cout << "
std::cout << ${0}
endsnippet

# cerr
snippet cerr "std::cerr << "
std::cerr << ${0}
endsnippet

# endl
snippet endl "<< std::endl;"
<< std::endl;
endsnippet

# cendl
snippet cendl "std::cout << std::endl;"
std::cout << std::endl;
endsnippet

# string
snippet str "std::string" i
std::string${0}
endsnippet

# setw
snippet setw "std::setw"
std::setw(${1})${0}
endsnippet

# setprecision
snippet setprecision "std::setprecision"
std::setprecision(${1})${0}
endsnippet

# showpoint
snippet showpoint "std::showpoint"
std::showpoint${0}
endsnippet

# fixed
snippet fixed "std::fixed"
std::fixed${0}
endsnippet

# left
snippet left "std::left"
std::left${0}
endsnippet

# right
snippet right "std::right"
std::right${0}
endsnippet

# fstream
snippet fstream "std::fstream"
std::fstream${0}
endsnippet

# ifstream
snippet ifstream "std::ifstream"
std::ifstream${0}
endsnippet

# ofstream
snippet ofstream "std::ofstream"
std::ofstream${0}
endsnippet

# ios
snippet ios "std::ios::"
std::ios::${0}
endsnippet

# ostream
snippet ostream "std::ostream" i
std::ostream${0}
endsnippet

# istream
snippet istream "std::istream" i
std::istream${0}
endsnippet

# vim:ft=snippets:
