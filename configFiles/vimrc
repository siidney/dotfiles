"
" Minimal test vimrc for lag reduction.
"
" 1.  PLUGIN LOADING
" 2.  GENERAL SETTINGS
"   2a. INDENTATION
"   2b. FILE BROWSING
" 3.  KEY BINDINGS
" 4.  COLOURS
" 5.  PLUGIN SETTINGS
" 6.  SEARCHING
" 7.  STATUS LINE
" 8.  WINDOW SPLITS
" 9.  STRIP WHITESPACE
" 10. TEMPLATE FILES
"

" -----------------------------
"  1. PLUGIN LOADING
" -----------------------------

" install plug if not already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    augroup plugInstall
        autocmd!
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    augroup END
endif

call plug#begin('~/.vim/plugged')

" snippets
Plug 'sirVer/ultisnips' | Plug 'honza/vim-snippets'
" color scheme
Plug 'sickill/vim-sunburst'
" glsl highlighting
Plug 'beyondmarc/glsl.vim'
" linting
Plug 'w0rp/ale'

" autocomplete
Plug 'maralla/completor.vim'

call plug#end()

" -----------------------------
"  2. GENERAL SETTINGS
" -----------------------------
if has('autocmd')
    filetype plugin on
endif

if has('syntax') && !exists('g:syntax:on')
    syntax on
endif

set shell=/bin/zsh              " set shell
" encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
" line endings
set fileformat=unix             " unix line endings
set fileformats=unix,dos        " line ending order for existing and new buffers

set autochdir                   " automatically changes working dir to current file
set autoread                    " reload files edited outside of vim
set backspace=indent,eol,start  " make backspace work
set display+=lastline           " display as much as possible of last line

" save last 1000 changes
if &history < 1000
    set history=1000
endif

set lazyredraw                  " prevent redraw during macro execution

set number                      " show line numbers
" specifies function used for C-x C-o omni completion
set omnifunc=syntaxcomplete#Complete

set ttimeout                    " allow key timeouts
set ttimeoutlen=100             " set key timeout length

set undofile                    " create <filename>.un~ on file close

" 2a. INDENTATION
set autoindent                  " set indent based on line above
set expandtab			" insert spaces whenever tab is pressed
set shiftwidth=4                " when reading, tabs are 4 spaces
set softtabstop=4               " insert mode tabs are 4 spaces
set smarttab
set wrap

" limit line width to 80 and highlight column 80
if exists('+colorcolumn')
    set colorcolumn=81
    highlight ColorColumn ctermbg=8
endif

" 2b. FILE BROWSING
if !exists('g:netrw_banner')
    let g:netrw_banner=0        " disable banner
endif

if !exists('g:netrw_liststyle')
    let g:netrw_liststyle=3     " change explorer style to tree
endif

" -----------------------------
"  3. KEY BINDINGS
" -----------------------------

let g:mapleader=','             " remap leader key

" <F2> open location list
nnoremap <silent><F2> <Esc>:lopen<CR>

" <F5> list open buffers and prompt to switch
nnoremap <F5> :ls<CR>:b<space>
" open new empty buffer
nnoremap <leader>B :enew<CR>
" move to next buffer
nnoremap <leader>l :bnext<CR>
" move to previous buffer
nnoremap <leader>h :bprevious<CR>

" <F6> netrw
nnoremap <silent><F6> :Lexplore<CR>

" <F8> View rendered markdown with grip
nnoremap <F8> <Esc>:!grip -b %<CR><CR>

" <F9> insert timestamp (normal and insert mode)
nnoremap <F9> "=strftime("%d/%m/%y %H:%M:%S")<CR>P
inoremap <F9> <C-R>=strftime("%d/%m/%y %H:%M:%S")<CR>

" disable arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" jk to exit insert mode
imap jk <Esc>

" reload vimrc
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" save file
nnoremap <leader>s :w<CR>
inoremap <leader>s <C-c>:w<CR>

" enter command line mode
nnoremap <Space>  :

" xclip
" pipe contents of paste buffer to xclip
nnoremap <silent><leader>xo :call system('xclip', @0)<CR>

" add contents of xclip to x register
" paste contents of x register inline
function! XclipO() abort
    let @x=system('xclip -o')
    normal! "xp
endfunction

nnoremap <silent><leader>xi :call XclipO()<CR>
inoremap <silent><leader>xi <esc>:call XclipO()<CR>i
" -----------------------------
"  4. COLOURS
" -----------------------------

set t_Co=256
set background=dark
colorscheme Sunburst

" -----------------------------
"  5. PLUGIN SETTINGS
" -----------------------------

" ULTISNIPS
let g:UltiSnipsExpandTrigger='<TAB>'
let g:UltiSnipsJumpForwardTrigger='<TAB>'
let g:UltiSnipsJumpBackwardTrigger='<S-TAB>'
let g:UltiSnipsEditSplit='vertical'

" ALE
let g:ale_linters = {
            \    'javascript': ['eslint'],
            \}

" statusline
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_statusline_format = ['X %d','⚠ %d', '⬥ ok']

" java options
let g:ale_java_checkstyle_options = '-c ~/.google_checks.xml'

" clang
let g:ale_cpp_clangtidy_options = '-- -std=c++14 -Wall'

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" COMPLETOR
let g:completor_clang_binary = '/usr/bin/clang'

" -----------------------------
"  6. SEARCHING
" -----------------------------
set path+=**                    " tab-completion for all file-related tasks
set wildmenu			" visual autocomplete for cmd menu
set showmatch			" highlight matching [{()}]
set incsearch			" highlight matches as characters entered
set hlsearch			" highlight matches

" clear search
if maparg('<silent><leader><space>', 'n') ==# ''
    nnoremap <silent> <leader><space> :noh<CR>
endif

" -----------------------------
"  7. STATUS LINE
" -----------------------------
set ruler                       " show line and col numbers of cursor position

let g:modes = {'n':'NORMAL', 'i':'INSERT', 'R':'REPLACE', 'v':'VISUAL', 'V':'V-LINE', '':'V-BLOCK'}

function! ModifiedColour() abort
    if mode() ==# 'i'
        hi statusline ctermfg=0 ctermbg=3
    else
        if &modified == 1
            hi statusline ctermfg=0 ctermbg=51
        else
            hi statusline ctermfg=15 ctermbg=8
        endif
    endif
    return ''
endfunction

if v:version >= 700
    augroup statusline
        autocmd!
        autocmd InsertEnter * exec ModifiedColour()
        autocmd InsertLeave * exec ModifiedColour()
        autocmd BufWritePost * exec ModifiedColour()
    augroup END
endif

hi statusline ctermfg=15 ctermbg=8

set laststatus=2            " always show status line

set statusline=
set statusline+=%{ModifiedColour()}
set statusline+=\ [%{get(modes,mode())}]                " show modes
set statusline+=\ %<%f                                  " filepath
set statusline+=\ %([%R%M%H]%)\ \|                      " readonly modified helpfile
set statusline+=\ %{ALEGetStatusLine()}\ \|             " ale statusline
" right side
set statusline+=%=
set statusline+=\%{strlen(&ft)?&ft:'none'}\ \|          " file type
set statusline+=\ %{&fileformat}\ \|                    " file format
set statusline+=\ %{(&fenc!=''?&fenc:&enc)}\ \|         " file encoding
set statusline+=\ BUF\ #%n\ \|                          " buffer number
set statusline+=\ %l/%L                                 " current/total lines
set statusline+=\ (%P)\ \|                              " percentage through file
set statusline+=\ COL%4c\                               " column number

" -----------------------------
"  8. WINDOW SPLITS
" -----------------------------
set splitbelow                  " :split sets new window below current
set splitright                  " :vsplit sets new window to right of current

" -----------------------------
"  9. STRIP WHITESPACE
" -----------------------------
highlight default ExtraWhitespace ctermbg=darkred

augroup whiteSpace_highlight
    autocmd!
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkred
augroup END

" show trailing whitespace
:match ExtraWhitespace /\s\+\%#\@<!$/

augroup whiteSpace
    autocmd!
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
augroup END

function! g:StripWhitespace() abort
    let l:save_cursor = winsaveview()
    keeppatterns %s/\v\s+$//e
    call winrestview(l:save_cursor)
endfunction

command! StripWhitespace call StripWhitespace()

" -----------------------------
"  10. TEMPLATE FILES
" -----------------------------
function! Template() abort
    let l:ext = expand('%:e')

    " read in template files
    let l:filepath = '$HOME/.vim/templates/skel.' . l:ext

    " ensure file exists
    if filereadable(expand(l:filepath))
        silent! execute '0r $HOME/.vim/templates/skel.'. l:ext

        " parse special text in templates after read
        keeppatterns %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge

        " find description placeholder
        let l:desc = search('%%%%')

        if l:desc > 0
            execute 'normal! c$'
        else
            " no description go to EOF
            execute 'normal! G'
        endif
        " enter insert mode
        execute ':startinsert!'
    endif
endfunction

augroup templates
    autocmd!
    autocmd BufNewfile * call Template()
augroup END
