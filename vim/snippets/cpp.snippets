# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}{
		${2}
	}
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}{
	    private:
		    ${2:}

	    public:
		    $1();
		    ~$1();
	};
snippet fori
	for(int ${2:i}=0; $2<${1:count}; ${3:++}$2){
		${4:/* code */}
	}
# Constructor
snippet const
	${1:`Filename('$1', 'name')`}::$1(${2}){
		${3}
	}
# Destructor
snippet dest
	${1:`Filename('$1', 'name')`}::~$1(){
		${2}
	}
# Constructor and Destructor
snippet ctdt
	${1:`Filename('$1', 'name')`}::$1(){
		${2}
	}
	$1::~$1(){
		${3}
	}
# comment block
snippet /**
	/*****************************************************************
	*   ${1}
	*****************************************************************/
# std::cout
snippet cout
	std::cout << ${1}
# std::cin
snippet cin
	std::cin >> ${1}
# std::endl
snippet endl
	<< std::endl;
# std::cout << std::endl
snippet cendl
	std::cout << std::endl;
# insert filename
snippet fname
	${1:`Filename('$1', 'name')`}${2}
# std::string
snippet string
	std::string
